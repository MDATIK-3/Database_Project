CREATE TABLE Administrator (
    Admin_ID INT PRIMARY KEY AUTO_INCREMENT,
    Admin_Name VARCHAR(100) NOT NULL,
    Password VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Contact_No VARCHAR(15),
    Date_Joined DATE
);

CREATE TABLE Department (
    Dept_ID INT PRIMARY KEY AUTO_INCREMENT,
    Department_Name VARCHAR(100) NOT NULL UNIQUE,
    HOD VARCHAR(100) NOT NULL
);

CREATE TABLE Course (
    Course_ID INT PRIMARY KEY AUTO_INCREMENT,
    C_Name VARCHAR(100) NOT NULL,
    Description TEXT,
    Credits INT NOT NULL,
    Dept_ID INT,
    FOREIGN KEY (Dept_ID) REFERENCES Department(Dept_ID) ON DELETE CASCADE
);
ALTER TABLE Course
MODIFY Credits DECIMAL(4, 2) NOT NULL;


CREATE TABLE Student (
    Student_ID INT PRIMARY KEY AUTO_INCREMENT,
    S_Name VARCHAR(100) NOT NULL,
    Address VARCHAR(255),
    Contact_No VARCHAR(15),
    Date_of_Birth DATE,
    Gender ENUM('Male', 'Female', 'Other'),
    Email VARCHAR(100) UNIQUE,
    Guardian_Name VARCHAR(100),
    Guardian_Contact_No VARCHAR(15),
    Enrollment_Date DATE NOT NULL
);

CREATE TABLE Fees (
    Receipt_No INT PRIMARY KEY AUTO_INCREMENT,
    Amount DECIMAL(10, 2) NOT NULL,
    Date_of_Receipt DATE NOT NULL,
    Student_ID INT,
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID) ON DELETE CASCADE
);

CREATE TABLE Exams (
    Exam_ID INT PRIMARY KEY AUTO_INCREMENT,
    Course_ID INT,
    Exam_Date DATE,
    Max_Marks INT,
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID) ON DELETE CASCADE
);

CREATE TABLE Exam_Scores (
    Score_ID INT PRIMARY KEY AUTO_INCREMENT,
    Exam_ID INT,
    Student_ID INT,
    Marks_Obtained INT,
    FOREIGN KEY (Exam_ID) REFERENCES Exams(Exam_ID) ON DELETE CASCADE,
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID) ON DELETE CASCADE
);

CREATE TABLE Attendance (
    Attendance_ID INT PRIMARY KEY AUTO_INCREMENT,
    Date DATE,
    Student_ID INT,
    Status ENUM('Present', 'Absent', 'Late', 'Excused'),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID) ON DELETE CASCADE
);

CREATE TABLE Library (
    Book_ID INT PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(255) NOT NULL,
    Author VARCHAR(100),
    Quantity INT,
    Available INT
);

CREATE TABLE Borrowed_Books (
    Borrow_ID INT PRIMARY KEY AUTO_INCREMENT,
    Student_ID INT,
    Book_ID INT,
    Borrow_Date DATE,
    Due_Date DATE,
    Return_Date DATE,
    Late_Fee DECIMAL(5, 2),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID) ON DELETE CASCADE,
    FOREIGN KEY (Book_ID) REFERENCES Library(Book_ID) ON DELETE CASCADE
);

CREATE TABLE Enrollment (
    Student_ID INT,
    Course_ID INT,
    Enrollment_Date DATE,
    PRIMARY KEY (Student_ID, Course_ID),
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID) ON DELETE CASCADE,
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID) ON DELETE CASCADE
);

CREATE TABLE Conducts (
    Dept_ID INT,
    Exam_ID INT,
    PRIMARY KEY (Dept_ID, Exam_ID),
    FOREIGN KEY (Dept_ID) REFERENCES Department(Dept_ID) ON DELETE CASCADE,
    FOREIGN KEY (Exam_ID) REFERENCES Exams(Exam_ID) ON DELETE CASCADE
);

CREATE TABLE Adds (
    Admin_ID INT,
    Student_ID INT,
    Date_Added DATE,
    PRIMARY KEY (Admin_ID, Student_ID),
    FOREIGN KEY (Admin_ID) REFERENCES Administrator(Admin_ID) ON DELETE CASCADE,
    FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID) ON DELETE CASCADE
);

CREATE TABLE Enters (
    Admin_ID INT,
    Course_ID INT,
    Date_Entered DATE,
    PRIMARY KEY (Admin_ID, Course_ID),
    FOREIGN KEY (Admin_ID) REFERENCES Administrator(Admin_ID) ON DELETE CASCADE,
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID) ON DELETE CASCADE
);

CREATE TABLE Manages (
    Admin_ID INT,
    Dept_ID INT,
    Date_Assigned DATE,
    PRIMARY KEY (Admin_ID, Dept_ID),
    FOREIGN KEY (Admin_ID) REFERENCES Administrator(Admin_ID) ON DELETE CASCADE,
    FOREIGN KEY (Dept_ID) REFERENCES Department(Dept_ID) ON DELETE CASCADE
);

CREATE TABLE Class_Schedule (
    Schedule_ID INT PRIMARY KEY AUTO_INCREMENT,
    Course_ID INT,
    Day ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday') NOT NULL,
    Start_Time TIME NOT NULL,
    End_Time TIME NOT NULL,
    Room_No VARCHAR(50),
    FOREIGN KEY (Course_ID) REFERENCES Course(Course_ID) ON DELETE CASCADE
);
